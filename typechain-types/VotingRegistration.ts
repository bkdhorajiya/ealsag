/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace VotingRegistration {
  export type CandidateStruct = { name: string; voteCount: BigNumberish };

  export type CandidateStructOutput = [name: string, voteCount: bigint] & {
    name: string;
    voteCount: bigint;
  };
}

export interface VotingRegistrationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CASE_ID"
      | "ELECTION_AUTHORITY"
      | "ELECTION_AUTHORITY_PUBLIC_KEY"
      | "MINIMUM_BALANCE"
      | "admin"
      | "candidates"
      | "castVote"
      | "endRegistration"
      | "endSubmission"
      | "endVoting"
      | "getAdminBalance"
      | "getAllEAPublicKeys"
      | "getAllowedDomains"
      | "getCandidates"
      | "getCaseId"
      | "getCurrentPhase"
      | "getElectionAuthorityPublicKey"
      | "getRegisteredEmails"
      | "getVoteCounts"
      | "getVoterPublicKey"
      | "getVotingKeySubmissions"
      | "getVotingPubKeys"
      | "hasGeneratedKeys"
      | "isKeyImageUsed"
      | "recoverSigner"
      | "registerVoter"
      | "registrationEndTime"
      | "registrationStartTime"
      | "submissionEndTime"
      | "submitVotingPublicKey"
      | "verifySignature"
      | "votingEndTime"
      | "votingKeySubmissions"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "KeysGenerated"
      | "RegistrationEnded"
      | "ResultPhaseStarted"
      | "SubmissionEnded"
      | "VoteCast"
      | "VotingEnded"
      | "VotingKeySubmitted"
  ): EventFragment;

  encodeFunctionData(functionFragment: "CASE_ID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ELECTION_AUTHORITY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ELECTION_AUTHORITY_PUBLIC_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_BALANCE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "candidates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "endRegistration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endSubmission",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endVoting", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAdminBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllEAPublicKeys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedDomains",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getCaseId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getElectionAuthorityPublicKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredEmails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteCounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterPublicKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingKeySubmissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPubKeys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasGeneratedKeys",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isKeyImageUsed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverSigner",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVoter",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registrationEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registrationStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submissionEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitVotingPublicKey",
    values: [string, string, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySignature",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votingEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingKeySubmissions",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "CASE_ID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ELECTION_AUTHORITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ELECTION_AUTHORITY_PUBLIC_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_BALANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endVoting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAdminBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllEAPublicKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedDomains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCaseId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getElectionAuthorityPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredEmails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingKeySubmissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPubKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasGeneratedKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKeyImageUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissionEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitVotingPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingKeySubmissions",
    data: BytesLike
  ): Result;
}

export namespace KeysGeneratedEvent {
  export type InputTuple = [email: string, publicKey: string];
  export type OutputTuple = [email: string, publicKey: string];
  export interface OutputObject {
    email: string;
    publicKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegistrationEndedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResultPhaseStartedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmissionEndedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [candidate: string];
  export type OutputTuple = [candidate: string];
  export interface OutputObject {
    candidate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingEndedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingKeySubmittedEvent {
  export type InputTuple = [votingPublicKey: string];
  export type OutputTuple = [votingPublicKey: string];
  export interface OutputObject {
    votingPublicKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VotingRegistration extends BaseContract {
  connect(runner?: ContractRunner | null): VotingRegistration;
  waitForDeployment(): Promise<this>;

  interface: VotingRegistrationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CASE_ID: TypedContractMethod<[], [string], "view">;

  ELECTION_AUTHORITY: TypedContractMethod<[], [string], "view">;

  ELECTION_AUTHORITY_PUBLIC_KEY: TypedContractMethod<[], [string], "view">;

  MINIMUM_BALANCE: TypedContractMethod<[], [bigint], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  candidates: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { name: string; voteCount: bigint }],
    "view"
  >;

  castVote: TypedContractMethod<
    [candidateName: string, votingPublicKey: string, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  endRegistration: TypedContractMethod<[], [void], "nonpayable">;

  endSubmission: TypedContractMethod<[], [void], "nonpayable">;

  endVoting: TypedContractMethod<[], [void], "nonpayable">;

  getAdminBalance: TypedContractMethod<[], [bigint], "view">;

  getAllEAPublicKeys: TypedContractMethod<[], [string[]], "view">;

  getAllowedDomains: TypedContractMethod<[], [string[]], "view">;

  getCandidates: TypedContractMethod<[], [string[]], "view">;

  getCaseId: TypedContractMethod<[], [string], "view">;

  getCurrentPhase: TypedContractMethod<[], [string], "view">;

  getElectionAuthorityPublicKey: TypedContractMethod<[], [string], "view">;

  getRegisteredEmails: TypedContractMethod<[], [string[]], "view">;

  getVoteCounts: TypedContractMethod<
    [],
    [VotingRegistration.CandidateStructOutput[]],
    "view"
  >;

  getVoterPublicKey: TypedContractMethod<[email: string], [string], "view">;

  getVotingKeySubmissions: TypedContractMethod<
    [],
    [
      [string[], string[], string[]] & {
        votingPublicKeys: string[];
        ringSignatureHashes: string[];
        keyImageHashes: string[];
      }
    ],
    "view"
  >;

  getVotingPubKeys: TypedContractMethod<[], [string[]], "view">;

  hasGeneratedKeys: TypedContractMethod<[email: string], [boolean], "view">;

  isKeyImageUsed: TypedContractMethod<[keyImage: BytesLike], [boolean], "view">;

  recoverSigner: TypedContractMethod<
    [_ethSignedMessageHash: BytesLike, _signature: BytesLike],
    [string],
    "view"
  >;

  registerVoter: TypedContractMethod<
    [email: string, voterPublicKey: string, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  registrationEndTime: TypedContractMethod<[], [bigint], "view">;

  registrationStartTime: TypedContractMethod<[], [bigint], "view">;

  submissionEndTime: TypedContractMethod<[], [bigint], "view">;

  submitVotingPublicKey: TypedContractMethod<
    [
      votingPublicKey: string,
      ringSignature: string,
      keyImage: BytesLike,
      voterAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  verifySignature: TypedContractMethod<
    [email: string, publicKey: string, signature: BytesLike],
    [boolean],
    "view"
  >;

  votingEndTime: TypedContractMethod<[], [bigint], "view">;

  votingKeySubmissions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, string, string, string, string] & {
        isUsed: boolean;
        votingPublicKey: string;
        ringSignatureHash: string;
        keyImageHash: string;
        voterAddress: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CASE_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ELECTION_AUTHORITY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ELECTION_AUTHORITY_PUBLIC_KEY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MINIMUM_BALANCE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "candidates"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { name: string; voteCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [candidateName: string, votingPublicKey: string, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endRegistration"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endSubmission"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endVoting"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAdminBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllEAPublicKeys"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllowedDomains"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCandidates"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCaseId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCurrentPhase"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getElectionAuthorityPublicKey"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRegisteredEmails"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVoteCounts"
  ): TypedContractMethod<
    [],
    [VotingRegistration.CandidateStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoterPublicKey"
  ): TypedContractMethod<[email: string], [string], "view">;
  getFunction(
    nameOrSignature: "getVotingKeySubmissions"
  ): TypedContractMethod<
    [],
    [
      [string[], string[], string[]] & {
        votingPublicKeys: string[];
        ringSignatureHashes: string[];
        keyImageHashes: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotingPubKeys"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "hasGeneratedKeys"
  ): TypedContractMethod<[email: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isKeyImageUsed"
  ): TypedContractMethod<[keyImage: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "recoverSigner"
  ): TypedContractMethod<
    [_ethSignedMessageHash: BytesLike, _signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerVoter"
  ): TypedContractMethod<
    [email: string, voterPublicKey: string, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registrationEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registrationStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "submissionEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "submitVotingPublicKey"
  ): TypedContractMethod<
    [
      votingPublicKey: string,
      ringSignature: string,
      keyImage: BytesLike,
      voterAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifySignature"
  ): TypedContractMethod<
    [email: string, publicKey: string, signature: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "votingEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingKeySubmissions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, string, string, string, string] & {
        isUsed: boolean;
        votingPublicKey: string;
        ringSignatureHash: string;
        keyImageHash: string;
        voterAddress: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "KeysGenerated"
  ): TypedContractEvent<
    KeysGeneratedEvent.InputTuple,
    KeysGeneratedEvent.OutputTuple,
    KeysGeneratedEvent.OutputObject
  >;
  getEvent(
    key: "RegistrationEnded"
  ): TypedContractEvent<
    RegistrationEndedEvent.InputTuple,
    RegistrationEndedEvent.OutputTuple,
    RegistrationEndedEvent.OutputObject
  >;
  getEvent(
    key: "ResultPhaseStarted"
  ): TypedContractEvent<
    ResultPhaseStartedEvent.InputTuple,
    ResultPhaseStartedEvent.OutputTuple,
    ResultPhaseStartedEvent.OutputObject
  >;
  getEvent(
    key: "SubmissionEnded"
  ): TypedContractEvent<
    SubmissionEndedEvent.InputTuple,
    SubmissionEndedEvent.OutputTuple,
    SubmissionEndedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VotingEnded"
  ): TypedContractEvent<
    VotingEndedEvent.InputTuple,
    VotingEndedEvent.OutputTuple,
    VotingEndedEvent.OutputObject
  >;
  getEvent(
    key: "VotingKeySubmitted"
  ): TypedContractEvent<
    VotingKeySubmittedEvent.InputTuple,
    VotingKeySubmittedEvent.OutputTuple,
    VotingKeySubmittedEvent.OutputObject
  >;

  filters: {
    "KeysGenerated(string,string)": TypedContractEvent<
      KeysGeneratedEvent.InputTuple,
      KeysGeneratedEvent.OutputTuple,
      KeysGeneratedEvent.OutputObject
    >;
    KeysGenerated: TypedContractEvent<
      KeysGeneratedEvent.InputTuple,
      KeysGeneratedEvent.OutputTuple,
      KeysGeneratedEvent.OutputObject
    >;

    "RegistrationEnded()": TypedContractEvent<
      RegistrationEndedEvent.InputTuple,
      RegistrationEndedEvent.OutputTuple,
      RegistrationEndedEvent.OutputObject
    >;
    RegistrationEnded: TypedContractEvent<
      RegistrationEndedEvent.InputTuple,
      RegistrationEndedEvent.OutputTuple,
      RegistrationEndedEvent.OutputObject
    >;

    "ResultPhaseStarted()": TypedContractEvent<
      ResultPhaseStartedEvent.InputTuple,
      ResultPhaseStartedEvent.OutputTuple,
      ResultPhaseStartedEvent.OutputObject
    >;
    ResultPhaseStarted: TypedContractEvent<
      ResultPhaseStartedEvent.InputTuple,
      ResultPhaseStartedEvent.OutputTuple,
      ResultPhaseStartedEvent.OutputObject
    >;

    "SubmissionEnded()": TypedContractEvent<
      SubmissionEndedEvent.InputTuple,
      SubmissionEndedEvent.OutputTuple,
      SubmissionEndedEvent.OutputObject
    >;
    SubmissionEnded: TypedContractEvent<
      SubmissionEndedEvent.InputTuple,
      SubmissionEndedEvent.OutputTuple,
      SubmissionEndedEvent.OutputObject
    >;

    "VoteCast(string)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VotingEnded()": TypedContractEvent<
      VotingEndedEvent.InputTuple,
      VotingEndedEvent.OutputTuple,
      VotingEndedEvent.OutputObject
    >;
    VotingEnded: TypedContractEvent<
      VotingEndedEvent.InputTuple,
      VotingEndedEvent.OutputTuple,
      VotingEndedEvent.OutputObject
    >;

    "VotingKeySubmitted(string)": TypedContractEvent<
      VotingKeySubmittedEvent.InputTuple,
      VotingKeySubmittedEvent.OutputTuple,
      VotingKeySubmittedEvent.OutputObject
    >;
    VotingKeySubmitted: TypedContractEvent<
      VotingKeySubmittedEvent.InputTuple,
      VotingKeySubmittedEvent.OutputTuple,
      VotingKeySubmittedEvent.OutputObject
    >;
  };
}
